
# 1. Check if a string is a palindrome
def checkPalindrome(s):
    return s == s[::-1]

# 2. Find the largest index of a character in str1 also present in str2
def minIndexFirstString(str1, str2):
    max_index = -1
    for i, char in enumerate(str1):
        if char in str2:
            max_index = i
    return max_index

# 3. Extract the first letter of every word
def firstLetters(s):
    words = s.split()
    return ''.join(word[0] for word in words)

# 4. Capitalize letters at even indices and raise exception for uppercase letters
class UpperCaseException(Exception):
    pass

def evenIndexCapital(s):
    if any(c.isupper() for c in s):
        raise UpperCaseException("Input contains uppercase letters.")
    return ''.join(c.upper() if i % 2 == 0 else c for i, c in enumerate(s))

# 5. Rotate string left and then right
def shift(s, ccount=0, acount=0):
    if not isinstance(ccount, int) or not isinstance(acount, int) or ccount < 0 or acount < 0:
        raise ValueError("Rotation counts must be non-negative integers.")
    acount %= len(s)
    ccount %= len(s)
    return s[acount:] + s[:acount] if ccount == 0 else (s[acount:] + s[:acount])[-ccount:] + (s[acount:] + s[:acount])[:-ccount]

# 6. Find sorted unique characters in two strings
def distChar(s1, s2):
    return ''.join(sorted(set(s1) ^ set(s2)))

# 7. Change characters to make the string uniform
class InvalidInputException(Exception):
    pass

def change(s):
    if not all(c in "RG" for c in s):
        raise InvalidInputException("Input must contain only 'R' and 'G'.")
    return min(s.count('R'), s.count('G'))

# 8. Remove vowels from a string
def delVowels(s):
    vowels = "aeiouAEIOU"
    return ''.join(c for c in s if c not in vowels)

# 9. Move duplicates to the end with '_' separator
def moveDups(s):
    seen, dups = [], []
    for c in s:
        if c in seen:
            dups.append(c)
        else:
            seen.append(c)
    return ''.join(seen) + ('_' + ''.join(dups) if dups else '')

# 10. Separate consecutive identical characters into groups
def separate(s):
    groups, temp = [], s[0]
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            temp += s[i]
        else:
            groups.append(temp)
            temp = s[i]
    groups.append(temp)
    return groups

# 11. Minimum operations to convert str1 to str2 (Levenshtein distance)
def minOp(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])
    
    return dp[m][n]

# 12. Calculate total fee paid based on roll number
class InvalidRollException(Exception):
    pass

def fee(base_fee, roll_no):
    if len(roll_no) != 7 or roll_no[:2] not in {'DS', 'CS', 'EE', 'ME'} or roll_no[4] not in {'1', '2'}:
        raise InvalidRollException("Invalid roll number.")
    
    year = int(roll_no[2:4])
    program = 4 if roll_no[4] == '1' else 2
    total_fee = 0
    
    for i in range(program):
        total_fee += base_fee * (1.1 ** i)
    
    return int(total_fee)

# 13. Reduce characters to make occurrence uniform
from collections import Counter

def reduce(s, k):
    freq = Counter(s)
    values = sorted(freq.values(), reverse=True)
    
    for _ in range(k):
        values[0] -= 1
        values.sort(reverse=True)
    
    if len(set(values)) == 1:
        reduced_chars = [char * freq[char] for char in sorted(freq.keys())]
        return ''.join(reduced_chars)
    
    return ""

# 14. Find longest rotationally equivalent substring
def is_rotation(s1, s2):
    return len(s1) == len(s2) and s1 in (s2 + s2)

def equivalent(str1, str2):
    longest = ""
    for i in range(len(str1)):
        for j in range(i + 1, len(str1) + 1):
            sub = str1[i:j]
            for k in range(len(str2)):
                for l in range(k + 1, len(str2) + 1):
                    if is_rotation(sub, str2[k:l]):
                        if len(sub) > len(longest) or (len(sub) == len(longest) and sub < longest):
                            longest = sub
    return longest if longest else "a"

# 15. Longest palindromic substring length
def subPali(s):
    n = len(s)
    longest = 1
    for i in range(n):
        for j in range(i + 1, n + 1):
            sub = s[i:j]
            if sub == sub[::-1]:
                longest = max(longest, len(sub))
    return longest

# 16. Extract duplicates from a list
def extractDup(lst):
    seen, dups = set(), set()
    for num in lst:
        if num in seen:
            dups.add(num)
        else:
            seen.add(num)
    return sorted(dups)

# 17. Perform various list operations
def listOps(lst):
    if len(lst) >= 4:
        print("Fourth item:", lst[3])
    else:
        print("Fourth item: List too short")
    
    print("All items except first two:", lst[2:])
    print("Reverse list:", lst[::-1])
    print("Sum of elements:", sum(lst))
    print(f"Max: {max(lst)}, Min: {min(lst)}")
    
    zero_index = lst.index(0) if 0 in lst else -1
    print("First zero index:", zero_index)
    
    print("Ascending order:", sorted(lst))
    print("Descending order:", sorted(lst, reverse=True))

# 18. Remove duplicates from list
def delDup(lst):
    return sorted(set(lst), key=lst.index)

# 19. Weave two lists together
class LengthMismatchException(Exception):
    pass

def weave(lst1, lst2):
    if len(lst1) != len(lst2):
        raise LengthMismatchException("Lists must have equal length.")
    return [lst1[i] for i in range(len(lst1))] + [lst2[i] for i in range(len(lst2))]

# 20. Odd numbers in Collatz sequence
def oddCollatz(n):
    seq = []
    while n != 1:
        if n % 2 == 1:
            seq.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    seq.append(1)
    return seq

# 21. Move all zeros to the right using list comprehension
def moveZeros(lst):
    return [x for x in lst if x != 0] + [0] * lst.count(0)

# 22. Print matrix from row-major order
class DimensionMismatchException(Exception):
    pass

def printMat(lst, rows, cols):
    if len(lst) != rows * cols:
        raise DimensionMismatchException("Dimensions do not match matrix size.")
    for i in range(rows):
        print(" ".join(map(str, lst[i*cols:(i+1)*cols])))

# 23. Matrix multiplication in row-major order
def matMul(mat1, mat2, n):
    if len(mat1) != len(mat2):
        raise DimensionMismatchException("Matrices must be of compatible dimensions.")
    result = [sum(mat1[i*n+j] * mat2[j*n+k] for j in range(n)) for i in range(n) for k in range(n)]
    return result

# 24. Compute sum of squares of positive numbers and sum of cubes of negatives
def splitsum(lst):
    return [sum(x**2 for x in lst if x > 0), sum(x**3 for x in lst if x < 0)]

# 25. Find the k-th largest element
class InvalidKException(Exception):
    pass

def kMax(lst, k):
    if k < 1 or k > len(lst):
        raise InvalidKException("Invalid value for k.")
    return sorted(lst, reverse=True)[k-1]

# 26. Student class implementation with score tracking
class Score:
    def __init__(self, subject, marks):
        self.subject = subject
        self.marks = marks

class Student:
    def __init__(self, name):
        self.name = name
        self.scores = []

    def add_score(self, subject, marks):
        self.scores.append(Score(subject, marks))

    def average(self):
        return round(sum(score.marks for score in self.scores) / len(self.scores), 2) if self.scores else 0

    def __str__(self):
        return f"{self.name}: {', '.join(f'{s.subject}-{s.marks}' for s in self.scores)}"

def classAverage(students, subject):
    subject_scores = [s.marks for student in students for s in student.scores if s.subject == subject]
    return round(sum(subject_scores) / len(subject_scores), 2) if subject_scores else 0




