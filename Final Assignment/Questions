
# 1. Check if a string is a palindrome
def checkPalindrome(s):
    return s == s[::-1]

# 2. Find the largest index of a character in str1 also present in str2
def minIndexFirstString(str1, str2):
    max_index = -1
    for i, char in enumerate(str1):
        if char in str2:
            max_index = i
    return max_index

# 3. Extract the first letter of every word
def firstLetters(s):
    words = s.split()
    return ''.join(word[0] for word in words)

# 4. Capitalize letters at even indices and raise exception for uppercase letters
class UpperCaseException(Exception):
    pass

def evenIndexCapital(s):
    if any(c.isupper() for c in s):
        raise UpperCaseException("Input contains uppercase letters.")
    return ''.join(c.upper() if i % 2 == 0 else c for i, c in enumerate(s))

# 5. Rotate string left and then right
def shift(s, ccount=0, acount=0):
    if not isinstance(ccount, int) or not isinstance(acount, int) or ccount < 0 or acount < 0:
        raise ValueError("Rotation counts must be non-negative integers.")
    acount %= len(s)
    ccount %= len(s)
    return s[acount:] + s[:acount] if ccount == 0 else (s[acount:] + s[:acount])[-ccount:] + (s[acount:] + s[:acount])[:-ccount]

# 6. Find sorted unique characters in two strings
def distChar(s1, s2):
    return ''.join(sorted(set(s1) ^ set(s2)))

# 7. Change characters to make the string uniform
class InvalidInputException(Exception):
    pass

def change(s):
    if not all(c in "RG" for c in s):
        raise InvalidInputException("Input must contain only 'R' and 'G'.")
    return min(s.count('R'), s.count('G'))

# 8. Remove vowels from a string
def delVowels(s):
    vowels = "aeiouAEIOU"
    return ''.join(c for c in s if c not in vowels)

# 9. Move duplicates to the end with '_' separator
def moveDups(s):
    seen, dups = [], []
    for c in s:
        if c in seen:
            dups.append(c)
        else:
            seen.append(c)
    return ''.join(seen) + ('_' + ''.join(dups) if dups else '')

# 10. Separate consecutive identical characters into groups
def separate(s):
    groups, temp = [], s[0]
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            temp += s[i]
        else:
            groups.append(temp)
            temp = s[i]
    groups.append(temp)
    return groups

# 11. Minimum operations to convert str1 to str2 (Levenshtein distance)
def minOp(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])
    
    return dp[m][n]

# 12. Calculate total fee paid based on roll number
class InvalidRollException(Exception):
    pass

def fee(base_fee, roll_no):
    if len(roll_no) != 7 or roll_no[:2] not in {'DS', 'CS', 'EE', 'ME'} or roll_no[4] not in {'1', '2'}:
        raise InvalidRollException("Invalid roll number.")
    
    year = int(roll_no[2:4])
    program = 4 if roll_no[4] == '1' else 2
    total_fee = 0
    
    for i in range(program):
        total_fee += base_fee * (1.1 ** i)
    
    return int(total_fee)

# 13. Reduce characters to make occurrence uniform
from collections import Counter

def reduce(s, k):
    freq = Counter(s)
    values = sorted(freq.values(), reverse=True)
    
    for _ in range(k):
        values[0] -= 1
        values.sort(reverse=True)
    
    if len(set(values)) == 1:
        reduced_chars = [char * freq[char] for char in sorted(freq.keys())]
        return ''.join(reduced_chars)
    
    return ""

# 14. Find longest rotationally equivalent substring
def is_rotation(s1, s2):
    return len(s1) == len(s2) and s1 in (s2 + s2)

def equivalent(str1, str2):
    longest = ""
    for i in range(len(str1)):
        for j in range(i + 1, len(str1) + 1):
            sub = str1[i:j]
            for k in range(len(str2)):
                for l in range(k + 1, len(str2) + 1):
                    if is_rotation(sub, str2[k:l]):
                        if len(sub) > len(longest) or (len(sub) == len(longest) and sub < longest):
                            longest = sub
    return longest if longest else "a"
